/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MyToken, MyTokenInterface } from "../../contracts/MyToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Trasfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600781526020017f4d79546f6b656e00000000000000000000000000000000000000000000000000815250600090816200004a9190620003d0565b506040518060400160405280600381526020017f4d5954000000000000000000000000000000000000000000000000000000000081525060019081620000919190620003d0565b50620f4240600255348015620000a657600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060025460046000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620004b7565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001d857607f821691505b602082108103620001ee57620001ed62000190565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000219565b62000264868362000219565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002b1620002ab620002a5846200027c565b62000286565b6200027c565b9050919050565b6000819050919050565b620002cd8362000290565b620002e5620002dc82620002b8565b84845462000226565b825550505050565b600090565b620002fc620002ed565b62000309818484620002c2565b505050565b5b81811015620003315762000325600082620002f2565b6001810190506200030f565b5050565b601f82111562000380576200034a81620001f4565b620003558462000209565b8101602085101562000365578190505b6200037d620003748562000209565b8301826200030e565b50505b505050565b600082821c905092915050565b6000620003a56000198460080262000385565b1980831691505092915050565b6000620003c0838362000392565b9150826002028217905092915050565b620003db8262000156565b67ffffffffffffffff811115620003f757620003f662000161565b5b620004038254620001bf565b6200041082828562000335565b600060209050601f83116001811462000448576000841562000433578287015190505b6200043f8582620003b2565b865550620004af565b601f1984166200045886620001f4565b60005b8281101562000482578489015182556001820191506020850194506020810190506200045b565b86831015620004a257848901516200049e601f89168262000392565b8355505b6001600288020188555050505b505050505050565b6109ff80620004c76000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd1461008557806370a08231146100a35780638da5cb5b146100d357806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61013f565b60405161007c9190610615565b60405180910390f35b61008d6101cd565b60405161009a9190610650565b60405180910390f35b6100bd60048036038101906100b891906106ce565b6101d3565b6040516100ca9190610650565b60405180910390f35b6100db61021c565b6040516100e8919061070a565b60405180910390f35b6100f9610242565b6040516101069190610615565b60405180910390f35b61012960048036038101906101249190610751565b6102d0565b60405161013691906107ac565b60405180910390f35b6000805461014c906107f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610178906107f6565b80156101c55780601f1061019a576101008083540402835291602001916101c5565b820191906000526020600020905b8154815290600101906020018083116101a857829003601f168201915b505050505081565b60025481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001805461024f906107f6565b80601f016020809104026020016040519081016040528092919081815260200182805461027b906107f6565b80156102c85780601f1061029d576101008083540402835291602001916102c8565b820191906000526020600020905b8154815290600101906020018083116102ab57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034b90610873565b60405180910390fd5b6103786040518060600160405280602481526020016109a660249139338585610493565b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103c791906108c2565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461041d91906108f6565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1fd6ebb971d137acf3f01670862b8a96758cfc7e39dccb093e68daf461b0262c846040516104819190610650565b60405180910390a36001905092915050565b61052f848484846040516024016104ad949392919061092a565b6040516020818303038152906040527f8ef3f399000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610535565b50505050565b61054c8161054461054f610570565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b61057b819050919050565b610583610976565b565b600081519050919050565b600082825260208201905092915050565b60005b838110156105bf5780820151818401526020810190506105a4565b60008484015250505050565b6000601f19601f8301169050919050565b60006105e782610585565b6105f18185610590565b93506106018185602086016105a1565b61060a816105cb565b840191505092915050565b6000602082019050818103600083015261062f81846105dc565b905092915050565b6000819050919050565b61064a81610637565b82525050565b60006020820190506106656000830184610641565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069b82610670565b9050919050565b6106ab81610690565b81146106b657600080fd5b50565b6000813590506106c8816106a2565b92915050565b6000602082840312156106e4576106e361066b565b5b60006106f2848285016106b9565b91505092915050565b61070481610690565b82525050565b600060208201905061071f60008301846106fb565b92915050565b61072e81610637565b811461073957600080fd5b50565b60008135905061074b81610725565b92915050565b600080604083850312156107685761076761066b565b5b6000610776858286016106b9565b92505060206107878582860161073c565b9150509250929050565b60008115159050919050565b6107a681610791565b82525050565b60006020820190506107c1600083018461079d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061080e57607f821691505b602082108103610821576108206107c7565b5b50919050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b600061085d601183610590565b915061086882610827565b602082019050919050565b6000602082019050818103600083015261088c81610850565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108cd82610637565b91506108d883610637565b92508282039050818111156108f0576108ef610893565b5b92915050565b600061090182610637565b915061090c83610637565b925082820190508082111561092457610923610893565b5b92915050565b6000608082019050818103600083015261094481876105dc565b905061095360208301866106fb565b61096060408301856106fb565b61096d6060830184610641565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfe5472616e7366657272696e672066726f6d20257320746f20257320257320746f6b656e73a26469706673582212203944683b8bcb390761467ffd1f91b2ab2748868cb08e7b441a9ef3478d96e4be64736f6c63430008130033";

type MyTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyToken__factory extends ContractFactory {
  constructor(...args: MyTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MyToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MyToken__factory {
    return super.connect(runner) as MyToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyTokenInterface {
    return new Interface(_abi) as MyTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MyToken {
    return new Contract(address, _abi, runner) as unknown as MyToken;
  }
}
